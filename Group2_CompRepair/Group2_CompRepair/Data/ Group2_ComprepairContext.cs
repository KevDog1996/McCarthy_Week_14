// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Group2_CompRepair.Models;

namespace Group2_CompRepair.Data
{
    public partial class  Group2_ComprepairContext : DbContext
    {
        public  Group2_ComprepairContext()
        {
        }

        public  Group2_ComprepairContext(DbContextOptions< Group2_ComprepairContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ComputerPart> ComputerParts { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<PartsOrdersLinking> PartsOrdersLinkings { get; set; }
        public virtual DbSet<Software> Softwares { get; set; }
        public virtual DbSet<SoftwareOrdersLinking> SoftwareOrdersLinkings { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-1LHTRK0;Initial Catalog=Group2_CompRepair;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ComputerPart>(entity =>
            {
                entity.HasKey(e => e.ComputerPartsId)
                    .HasName("PK__Computer__592E0023948FBE36");

                entity.ToTable("Computer_Parts");

                entity.Property(e => e.ComputerPartsId).HasColumnName("Computer_Parts_Id");

                entity.Property(e => e.PartDescription)
                    .IsUnicode(false)
                    .HasColumnName("Part_Description");

                entity.Property(e => e.PartName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Part_Name")
                    .IsFixedLength();

                entity.Property(e => e.PartPrice)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("Part_Price");

                entity.Property(e => e.PartType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Part_Type");

                entity.Property(e => e.PartsInStock).HasColumnName("Parts_in_Stock");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.Property(e => e.CustomerId).HasColumnName("Customer_Id");

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Address")
                    .IsFixedLength();

                entity.Property(e => e.CustomerEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Email");

                entity.Property(e => e.CustomerFirstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Firstname")
                    .IsFixedLength();

                entity.Property(e => e.CustomerLastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Lastname")
                    .IsFixedLength();

                entity.Property(e => e.CustomerPhone)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Phone")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.Property(e => e.EmployeeId).HasColumnName("Employee_Id");

                entity.Property(e => e.EmployeeAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Address")
                    .IsFixedLength();

                entity.Property(e => e.EmployeeEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Email");

                entity.Property(e => e.EmployeeFirstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Firstname")
                    .IsFixedLength();

                entity.Property(e => e.EmployeeLastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Lastname")
                    .IsFixedLength();

                entity.Property(e => e.EmployeePhone)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Phone")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.OrderId).HasColumnName("Order_Id");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_Id");

                entity.Property(e => e.EmployeeId).HasColumnName("Employee_Id");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Order_Date");

                entity.Property(e => e.OrderTotal)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("Order_total");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Customer_Id");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employee_Id");
            });

            modelBuilder.Entity<PartsOrdersLinking>(entity =>
            {
                entity.HasKey(e => e.PartsOrdersId)
                    .HasName("PK__Parts_Or__DFAB967337B991F1");

                entity.ToTable("Parts_Orders_Linking");

                entity.Property(e => e.PartsOrdersId).HasColumnName("Parts_Orders_Id");

                entity.Property(e => e.ComputerPartsId).HasColumnName("Computer_Parts_Id");

                entity.Property(e => e.OrderId).HasColumnName("Order_Id");

                entity.Property(e => e.QtyOfParts).HasColumnName("Qty_Of_Parts");

                entity.HasOne(d => d.ComputerParts)
                    .WithMany(p => p.PartsOrdersLinkings)
                    .HasForeignKey(d => d.ComputerPartsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Computer_Parts_Id");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.PartsOrdersLinkings)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Id");
            });

            modelBuilder.Entity<Software>(entity =>
            {
                entity.ToTable("Software");

                entity.Property(e => e.SoftwareId).HasColumnName("Software_Id");

                entity.Property(e => e.LicensesInStock).HasColumnName("Licenses_In_Stock");

                entity.Property(e => e.SoftwareDescription)
                    .IsUnicode(false)
                    .HasColumnName("Software_Description");

                entity.Property(e => e.SoftwareName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Software_Name");

                entity.Property(e => e.SoftwarePrice)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("Software_Price");

                entity.Property(e => e.SoftwareType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Software_Type");
            });

            modelBuilder.Entity<SoftwareOrdersLinking>(entity =>
            {
                entity.HasKey(e => e.SoftwareOrdersId)
                    .HasName("PK__Software__01C332F867DEA583");

                entity.ToTable("Software_Orders_Linking");

                entity.Property(e => e.SoftwareOrdersId).HasColumnName("Software_Orders_Id");

                entity.Property(e => e.OrderId).HasColumnName("Order_Id");

                entity.Property(e => e.SoftwareId).HasColumnName("Software_Id");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.SoftwareOrdersLinkings)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Id");

                entity.HasOne(d => d.Software)
                    .WithMany(p => p.SoftwareOrdersLinkings)
                    .HasForeignKey(d => d.SoftwareId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Software_Id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}